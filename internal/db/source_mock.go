// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package db is a generated GoMock package.
package db

import (
	entity "L0/internal/entity"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderSource is a mock of OrderSource interface.
type MockOrderSource struct {
	ctrl     *gomock.Controller
	recorder *MockOrderSourceMockRecorder
}

// MockOrderSourceMockRecorder is the mock recorder for MockOrderSource.
type MockOrderSourceMockRecorder struct {
	mock *MockOrderSource
}

// NewMockOrderSource creates a new mock instance.
func NewMockOrderSource(ctrl *gomock.Controller) *MockOrderSource {
	mock := &MockOrderSource{ctrl: ctrl}
	mock.recorder = &MockOrderSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderSource) EXPECT() *MockOrderSourceMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderSource) CreateOrder(ctx context.Context, order *entity.Order) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderSourceMockRecorder) CreateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderSource)(nil).CreateOrder), ctx, order)
}

// GetAllOrders mocks base method.
func (m *MockOrderSource) GetAllOrders(ctx context.Context) ([]*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders", ctx)
	ret0, _ := ret[0].([]*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockOrderSourceMockRecorder) GetAllOrders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockOrderSource)(nil).GetAllOrders), ctx)
}

// GetOrderByUid mocks base method.
func (m *MockOrderSource) GetOrderByUid(ctx context.Context, uid string) (*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByUid", ctx, uid)
	ret0, _ := ret[0].(*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByUid indicates an expected call of GetOrderByUid.
func (mr *MockOrderSourceMockRecorder) GetOrderByUid(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByUid", reflect.TypeOf((*MockOrderSource)(nil).GetOrderByUid), ctx, uid)
}

// MockDeliverySource is a mock of DeliverySource interface.
type MockDeliverySource struct {
	ctrl     *gomock.Controller
	recorder *MockDeliverySourceMockRecorder
}

// MockDeliverySourceMockRecorder is the mock recorder for MockDeliverySource.
type MockDeliverySourceMockRecorder struct {
	mock *MockDeliverySource
}

// NewMockDeliverySource creates a new mock instance.
func NewMockDeliverySource(ctrl *gomock.Controller) *MockDeliverySource {
	mock := &MockDeliverySource{ctrl: ctrl}
	mock.recorder = &MockDeliverySourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeliverySource) EXPECT() *MockDeliverySourceMockRecorder {
	return m.recorder
}

// CreateDelivery mocks base method.
func (m *MockDeliverySource) CreateDelivery(ctx context.Context, delivery *entity.Delivery) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDelivery", ctx, delivery)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDelivery indicates an expected call of CreateDelivery.
func (mr *MockDeliverySourceMockRecorder) CreateDelivery(ctx, delivery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDelivery", reflect.TypeOf((*MockDeliverySource)(nil).CreateDelivery), ctx, delivery)
}

// GetDeliveryByEmail mocks base method.
func (m *MockDeliverySource) GetDeliveryByEmail(ctx context.Context, email string) (*entity.DeliveryDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliveryByEmail", ctx, email)
	ret0, _ := ret[0].(*entity.DeliveryDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeliveryByEmail indicates an expected call of GetDeliveryByEmail.
func (mr *MockDeliverySourceMockRecorder) GetDeliveryByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliveryByEmail", reflect.TypeOf((*MockDeliverySource)(nil).GetDeliveryByEmail), ctx, email)
}

// GetDeliveryById mocks base method.
func (m *MockDeliverySource) GetDeliveryById(ctx context.Context, id string) (*entity.DeliveryDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliveryById", ctx, id)
	ret0, _ := ret[0].(*entity.DeliveryDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeliveryById indicates an expected call of GetDeliveryById.
func (mr *MockDeliverySourceMockRecorder) GetDeliveryById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliveryById", reflect.TypeOf((*MockDeliverySource)(nil).GetDeliveryById), ctx, id)
}

// GetDeliveryByPhone mocks base method.
func (m *MockDeliverySource) GetDeliveryByPhone(ctx context.Context, phone string) (*entity.DeliveryDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliveryByPhone", ctx, phone)
	ret0, _ := ret[0].(*entity.DeliveryDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeliveryByPhone indicates an expected call of GetDeliveryByPhone.
func (mr *MockDeliverySourceMockRecorder) GetDeliveryByPhone(ctx, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliveryByPhone", reflect.TypeOf((*MockDeliverySource)(nil).GetDeliveryByPhone), ctx, phone)
}

// MockPaymentSource is a mock of PaymentSource interface.
type MockPaymentSource struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentSourceMockRecorder
}

// MockPaymentSourceMockRecorder is the mock recorder for MockPaymentSource.
type MockPaymentSourceMockRecorder struct {
	mock *MockPaymentSource
}

// NewMockPaymentSource creates a new mock instance.
func NewMockPaymentSource(ctrl *gomock.Controller) *MockPaymentSource {
	mock := &MockPaymentSource{ctrl: ctrl}
	mock.recorder = &MockPaymentSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentSource) EXPECT() *MockPaymentSourceMockRecorder {
	return m.recorder
}

// CreatePayment mocks base method.
func (m *MockPaymentSource) CreatePayment(ctx context.Context, payment *entity.Payment) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", ctx, payment)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockPaymentSourceMockRecorder) CreatePayment(ctx, payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockPaymentSource)(nil).CreatePayment), ctx, payment)
}

// GetPaymentByTransaction mocks base method.
func (m *MockPaymentSource) GetPaymentByTransaction(ctx context.Context, transaction string) (*entity.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentByTransaction", ctx, transaction)
	ret0, _ := ret[0].(*entity.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentByTransaction indicates an expected call of GetPaymentByTransaction.
func (mr *MockPaymentSourceMockRecorder) GetPaymentByTransaction(ctx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentByTransaction", reflect.TypeOf((*MockPaymentSource)(nil).GetPaymentByTransaction), ctx, transaction)
}

// MockItemSource is a mock of ItemSource interface.
type MockItemSource struct {
	ctrl     *gomock.Controller
	recorder *MockItemSourceMockRecorder
}

// MockItemSourceMockRecorder is the mock recorder for MockItemSource.
type MockItemSourceMockRecorder struct {
	mock *MockItemSource
}

// NewMockItemSource creates a new mock instance.
func NewMockItemSource(ctrl *gomock.Controller) *MockItemSource {
	mock := &MockItemSource{ctrl: ctrl}
	mock.recorder = &MockItemSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemSource) EXPECT() *MockItemSourceMockRecorder {
	return m.recorder
}

// CreateItem mocks base method.
func (m *MockItemSource) CreateItem(ctx context.Context, item *entity.Item) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItem", ctx, item)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockItemSourceMockRecorder) CreateItem(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockItemSource)(nil).CreateItem), ctx, item)
}

// CreateItems mocks base method.
func (m *MockItemSource) CreateItems(ctx context.Context, items []entity.Item) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItems", ctx, items)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItems indicates an expected call of CreateItems.
func (mr *MockItemSourceMockRecorder) CreateItems(ctx, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItems", reflect.TypeOf((*MockItemSource)(nil).CreateItems), ctx, items)
}

// GetItemByUid mocks base method.
func (m *MockItemSource) GetItemByUid(ctx context.Context, uid string) (*entity.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemByUid", ctx, uid)
	ret0, _ := ret[0].(*entity.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemByUid indicates an expected call of GetItemByUid.
func (mr *MockItemSourceMockRecorder) GetItemByUid(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemByUid", reflect.TypeOf((*MockItemSource)(nil).GetItemByUid), ctx, uid)
}

// GetItemsByTrackNumber mocks base method.
func (m *MockItemSource) GetItemsByTrackNumber(ctx context.Context, trackNumber string) ([]entity.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsByTrackNumber", ctx, trackNumber)
	ret0, _ := ret[0].([]entity.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsByTrackNumber indicates an expected call of GetItemsByTrackNumber.
func (mr *MockItemSourceMockRecorder) GetItemsByTrackNumber(ctx, trackNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsByTrackNumber", reflect.TypeOf((*MockItemSource)(nil).GetItemsByTrackNumber), ctx, trackNumber)
}
