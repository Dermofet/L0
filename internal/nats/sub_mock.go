// Code generated by MockGen. DO NOT EDIT.
// Source: C:/Users/pi-77.BARMOUNT/go/pkg/mod/github.com/nats-io/stan.go@v0.10.4/sub.go

// Package nats is a generated GoMock package.
package nats

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSubscription is a mock of Subscription interface.
type MockSubscription struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionMockRecorder
}

// MockSubscriptionMockRecorder is the mock recorder for MockSubscription.
type MockSubscriptionMockRecorder struct {
	mock *MockSubscription
}

// NewMockSubscription creates a new mock instance.
func NewMockSubscription(ctrl *gomock.Controller) *MockSubscription {
	mock := &MockSubscription{ctrl: ctrl}
	mock.recorder = &MockSubscriptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscription) EXPECT() *MockSubscriptionMockRecorder {
	return m.recorder
}

// ClearMaxPending mocks base method.
func (m *MockSubscription) ClearMaxPending() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearMaxPending")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearMaxPending indicates an expected call of ClearMaxPending.
func (mr *MockSubscriptionMockRecorder) ClearMaxPending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearMaxPending", reflect.TypeOf((*MockSubscription)(nil).ClearMaxPending))
}

// Close mocks base method.
func (m *MockSubscription) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSubscriptionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSubscription)(nil).Close))
}

// Delivered mocks base method.
func (m *MockSubscription) Delivered() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delivered")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delivered indicates an expected call of Delivered.
func (mr *MockSubscriptionMockRecorder) Delivered() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delivered", reflect.TypeOf((*MockSubscription)(nil).Delivered))
}

// Dropped mocks base method.
func (m *MockSubscription) Dropped() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dropped")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dropped indicates an expected call of Dropped.
func (mr *MockSubscriptionMockRecorder) Dropped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dropped", reflect.TypeOf((*MockSubscription)(nil).Dropped))
}

// IsValid mocks base method.
func (m *MockSubscription) IsValid() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValid")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValid indicates an expected call of IsValid.
func (mr *MockSubscriptionMockRecorder) IsValid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValid", reflect.TypeOf((*MockSubscription)(nil).IsValid))
}

// MaxPending mocks base method.
func (m *MockSubscription) MaxPending() (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxPending")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MaxPending indicates an expected call of MaxPending.
func (mr *MockSubscriptionMockRecorder) MaxPending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxPending", reflect.TypeOf((*MockSubscription)(nil).MaxPending))
}

// Pending mocks base method.
func (m *MockSubscription) Pending() (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pending")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Pending indicates an expected call of Pending.
func (mr *MockSubscriptionMockRecorder) Pending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pending", reflect.TypeOf((*MockSubscription)(nil).Pending))
}

// PendingLimits mocks base method.
func (m *MockSubscription) PendingLimits() (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingLimits")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PendingLimits indicates an expected call of PendingLimits.
func (mr *MockSubscriptionMockRecorder) PendingLimits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingLimits", reflect.TypeOf((*MockSubscription)(nil).PendingLimits))
}

// SetPendingLimits mocks base method.
func (m *MockSubscription) SetPendingLimits(msgLimit, bytesLimit int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPendingLimits", msgLimit, bytesLimit)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPendingLimits indicates an expected call of SetPendingLimits.
func (mr *MockSubscriptionMockRecorder) SetPendingLimits(msgLimit, bytesLimit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPendingLimits", reflect.TypeOf((*MockSubscription)(nil).SetPendingLimits), msgLimit, bytesLimit)
}

// Unsubscribe mocks base method.
func (m *MockSubscription) Unsubscribe() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe")
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockSubscriptionMockRecorder) Unsubscribe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockSubscription)(nil).Unsubscribe))
}
